#!/usr/bin/perl

# Created on: 2018-07-13 09:02:10
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Tiny;
use JSON::XS qw/encode_json decode_json/;
use CHI::Memoize qw(:all);
use Gulp::Analyser;

our $VERSION = 0.001;
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    gulp    => 'gulp',
    depth   => 10,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'gulp|g=s',
        'ignore|i=s@',
        'describe|d=s@',
        'output|o=s',
        'report|r=s',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    memoize('Gulp::Analyser::generate_report',
        driver     => 'File',
        root_dir   => ".gulp-analyser",
        expires_in => '4w',
        key        => sub { shift @_; join ' ', @_ },
    );

    my $task = shift @ARGV || pod2usage( -verbose => 1 );
    my $analyser = Gulp::Analyser->new(%option);
    my $report = $option{report}
        ? read_report($option{report})
        : $analyser->generate_report($task);

    if ( $option{describe} ) {
        print output({$analyser->describe($task, $report, @{ $option{describe} })});
    }
    else {
        print output($report);
    }

    return;
}

sub read_report {
    my ($file) = @_;

    if ( $file =~ /[.]ya?ml$/ ) {
        require YAML::XS;
        return YAML::XS::LoadFile($file);
    }

    return decode_json(scalar path($file)->slurp);
}

sub output {
    my ($data) = @_;

    if ( $option{output} ) {
        if ( $option{output} eq 'json' ) {
            return encode_json($data);
        }
    }

    require YAML::XS;
    return YAML::XS::Dump($data);
}

__DATA__

=head1 NAME

gulp-analyser - Analyse gulp tasks for what they actually do

=head1 VERSION

This documentation refers to gulp-analyser version 0.001

=head1 SYNOPSIS

   gulp-analyser [option]

 OPTIONS:
  -g --gulp[=]str   Specify the gulp command to run (Defaults to "gulp")
  -i --ignore[=]regex
                    Add patterns to list of files that we don't care about (default .git and node_modules)

  -v --verbose      Show more detailed option
     --version      Prints the version information
     --help         Prints this help information
     --man          Prints the full documentation for gulp-analyser

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2018 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
